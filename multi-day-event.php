<?php
/*
Plugin Name: Multi Day Event
Description: Manage events spanning multiple days
Version: 1.2
Author: Christian Behrends
Author URI: http://webdevtrust.com/
Text Domain: multi-day-event
License: GPL
Copyright: Christian Behrends
*/
function mde_register_post_type() {
	$labels = array(
		'name' => esc_attr__( 'Events', 'multi-day-event' ),
		'singular_name' => esc_attr__( 'Event', 'multi-day-event' ),
		'add_new' => esc_attr__( 'Add New', 'multi-day-event' ),
		'all_items' => esc_attr__( 'All Events', 'multi-day-event' ),
		'add_new_item' => esc_attr__( 'Add Event', 'multi-day-event' ),
		'edit_item' => esc_attr__( 'Edit Event', 'multi-day-event' ),
		'new_item' => esc_attr__( 'New Event', 'multi-day-event' ),
		'view_item' => esc_attr__( 'Show Event', 'multi-day-event' ),
		'search_item' => esc_attr__( 'Search Events', 'multi-day-event' ),
		'not_found' => esc_attr__( 'No matching Events.', 'multi-day-event' ),
		'not_found_in_trash' => esc_attr__( 'No Events in Trash.', 'multi-day-event' ),
		'parent_item_colon' => esc_attr__( 'Superordinate Event', 'multi-day-event' )
	);
	$args = array(
		'labels' => $labels,
		'description' => esc_attr__( 'Events spanning multiple days', 'multi-day-event' ),
		'public' => true,
		'has_archive' => true,
		'publicly_queryable' => true,
		'query_var' => true,
		'rewrite' => true,
		'capability_type' => 'post',
		'hierarchical' => false,
		'supports' => array(
			'title',
			'editor',
			'excerpt',
			'thumbnail',
			'revisions'
		),
		'menu_position' => 5,
		'menu_icon' => 'dashicons-clock',
		'exclude_from_search' => false
	);
	register_post_type( 'event', $args );

}
add_action( 'init', 'mde_register_post_type' );

function mde_load_textdomain() {
	load_plugin_textdomain( 'multi-day-event', false, dirname( plugin_basename(__FILE__) ) . '/languages' );
}
add_action( 'plugins_loaded', 'mde_load_textdomain' );

/**
* Generated by the WordPress Meta Box Generator at http://goo.gl/8nwllb
*/
class Rational_Meta_Box {
	private $screens = array(
		'event',
	);
	private $fields = array(
		array(
			'id' => 'eventday_1',
			'label' => 'Day 1',
			'type' => 'date',
		),
		array(
			'id' => 'timescale_1',
			'label' => 'Begin - End',
			'type' => 'text',
		),
		array(
			'id' => 'eventday_2',
			'label' => 'Day 2',
			'type' => 'date',
		),
		array(
			'id' => 'timescale_2',
			'label' => 'Begin - End',
			'type' => 'text',
		),
		array(
			'id' => 'eventday_3',
			'label' => 'Day 3',
			'type' => 'date',
		),
		array(
			'id' => 'timescale_3',
			'label' => 'Begin - End',
			'type' => 'text',
		),
	);

	/**
	 * Class construct method. Adds actions to their respective WordPress hooks.
	 */
	public function __construct() {
		add_action( 'add_meta_boxes', array( $this, 'add_meta_boxes' ) );
		add_action( 'save_post', array( $this, 'save_post' ) );
	}

	/**
	 * Hooks into WordPress' add_meta_boxes function.
	 * Goes through screens (post types) and adds the meta box.
	 */
	public function add_meta_boxes() {
		foreach ( $this->screens as $screen ) {
			add_meta_box(
				'eventdetails',
				esc_html__( 'Schedule', 'multi-day-event' ),
				array( $this, 'add_meta_box_callback' ),
				$screen,
				'normal',
				'core'
			);
		}
	}

	/**
	 * Generates the HTML for the meta box
	 *
	 * @param object $post WordPress post object
	 */
	public function add_meta_box_callback( $post ) {
		wp_nonce_field( 'eventdetails_data', 'eventdetails_nonce' );
		esc_html_e( 'Please enter Day 1 at least.','multi-day-event' ) ;
		$this->generate_fields( $post );
	}

	/**
	 * Generates the field's HTML for the meta box.
	 */
	public function generate_fields( $post ) {
		$output = '';
		foreach ( $this->fields as $field ) {
			$label = '<label for="' . $field['id'] . '">' . __( $field['label'], 'multi-day-event' ) . '</label>';
			$db_value = get_post_meta( $post->ID, 'eventdetails_' . $field['id'], true );
			switch ( $field['type'] ) {
				default:
					$input = sprintf(
						'<input %s id="%s" name="%s" type="%s" value="%s">',
						$field['type'] !== 'color' ? 'class="regular-text"' : '',
						$field['id'],
						$field['id'],
						$field['type'],
						$db_value
					);
			}
			$output .= $this->row_format( $label, $input );
		}
		echo '<table class="form-table"><tbody>' . $output . '</tbody></table>';
	}

	/**
	 * Generates the HTML for table rows.
	 */
	public function row_format( $label, $input ) {
		return sprintf(
			'<tr><th scope="row">%s</th><td>%s</td></tr>',
			$label,
			$input
		);
	}
	/**
	 * Hooks into WordPress' save_post function
	 */
	public function save_post( $post_id ) {
		if ( ! isset( $_POST['eventdetails_nonce'] ) )
			return $post_id;

		$nonce = $_POST['eventdetails_nonce'];
		if ( !wp_verify_nonce( $nonce, 'eventdetails_data' ) )
			return $post_id;

		if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE )
			return $post_id;

		foreach ( $this->fields as $field ) {
			if ( isset( $_POST[ $field['id'] ] ) ) {
				switch ( $field['type'] ) {
					case 'email':
						$_POST[ $field['id'] ] = sanitize_email( $_POST[ $field['id'] ] );
						break;
					case 'text':
						$_POST[ $field['id'] ] = sanitize_text_field( $_POST[ $field['id'] ] );
						break;
				}
				update_post_meta( $post_id, 'eventdetails_' . $field['id'], $_POST[ $field['id'] ] );
			} else if ( $field['type'] === 'checkbox' ) {
				update_post_meta( $post_id, 'eventdetails_' . $field['id'], '0' );
			}
		}
	}
}
new Rational_Meta_Box;

/**
* ordering event post types descending
*/
function event_pre_get_posts( $query ) {

	// only modify queries for 'event' post type
	if( isset( $query->query_vars['post_type'] ) && $query->query_vars['post_type'] == 'event' ) {

		$query->set('orderby', 'meta_value');
		$query->set('meta_key', 'eventdetails_eventday_1');
		$query->set('order', 'ASC');

	}
	return $query;

}
add_action('pre_get_posts', 'event_pre_get_posts');

/**
* adding schedule to admin columns
*/
function event_cpt_columns($columns) {

	$new_columns = array(
		'schedule' => esc_html__('Schedule', 'multi-day-event'),
	);
	return array_merge($columns, $new_columns);

}
add_filter('manage_event_posts_columns' , 'event_cpt_columns');

function event_post_cpt_columns( $column, $post_id) {
	global $post;

	switch( $column ) {
		case 'schedule':
			$schedule = get_post_meta( $post_id, 'eventdetails_eventday_1', true);
			if( $schedule != '' ) {

				$schedule = date_i18n( get_option( 'date_format' ), mysql2date( 'U', $schedule ) );

				$day2 = get_post_meta( $post_id, 'eventdetails_eventday_2', true);
				if( $day2 != '' ) {
					$schedule .= '<br>' . date_i18n( get_option( 'date_format' ), mysql2date( 'U', $day2 ) );
				}

				$day3 = get_post_meta( $post_id, 'eventdetails_eventday_3', true);
				if( $day3 !=  '' ) {
					$schedule .= '<br>' . date_i18n( get_option( 'date_format' ), mysql2date( 'U', $day3 ) );
				}

				echo $schedule;

			} else {
				esc_html_e('Date missing', 'multi-day-event' );
			}
			break;
		default:
			break;
	}

}
add_action( 'manage_event_posts_custom_column', 'event_post_cpt_columns', 10, 2 );
